#!/usr/bin/python3
import pandas as pd
import os
import re
import numpy as np
def extract_number(filename):
    match = re.search(r'(\d+)\.txt$', filename)
    if match:
        return int(match.group(1))
    else:
        raise ValueError(f"Filename does not match expected pattern: {filename}")

# Get the full path of the current working directory
current_directory_path = os.getcwd()

# Extract the base name (the last component) of the path
Season = os.path.basename(current_directory_path)

paths_x = []
paths_p = []
paths_e = []
for path_to_result in os.listdir(Season+'_Results'):
    if path_to_result[:8] == 'r3E3gs_x':
        paths_x.append(Season+'_Results/'+path_to_result)
    elif path_to_result[:8] == 'r3E3gs_p':
        paths_p.append(Season+'_Results/'+path_to_result)
    elif path_to_result[:8] == 'r3E3gs_e':
        paths_e.append(Season+'_Results/'+path_to_result)
paths_x = sorted(paths_x, key = extract_number)
matrix_x = [np.loadtxt(f) for f in paths_x]
matrix_x = np.stack(matrix_x)
mean_x = np.sum(matrix_x, axis=0)/len(paths_x)
var_x = (matrix_x-mean_x)**2

paths_p = sorted(paths_p, key = extract_number)
matrix_p = [np.loadtxt(f) for f in paths_p]
matrix_p = np.stack(matrix_p)
matrix_p = [np.loadtxt(f) for f in paths_p]
matrix_p = np.stack(matrix_p)
mean_p = np.sum(matrix_p, axis=0)/len(paths_p)
var_p = (matrix_p-mean_p)**2

paths_e = sorted(paths_e, key = extract_number)
matrix_e = [np.loadtxt(f) for f in paths_e]
matrix_e = np.stack(matrix_e)
matrix_e = [np.loadtxt(f) for f in paths_e]
matrix_e = np.stack(matrix_e)
mean_e = np.sum(matrix_e, axis=0)/len(paths_e)
var_e = (matrix_e-mean_e)**2

